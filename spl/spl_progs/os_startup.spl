load(5,19);//load File Allocation Table (FAT) from disk (block 19) to memory (pageNo 5) 
load(6,20);//load Disk Free List from disk to memory
// Load Exception Handler from disk to memory
load(7, 1);
load(8, 2);
// Load Timer Interrupt Routine from disk to memory
load (9, 3);
load (10, 4);
// Load Interrupt 1 Routine from disk to memory
load (11, 5);
load (12, 6);
// Load Interrupt 2 Routine from disk to memory
load (13, 7);
load (14, 8);
// Load Interrupt 3 Routine from disk to memory
load (15, 9);
load (16, 10);
// Load Interrupt 4 Routine from disk to memory
load (17, 11);
load (18, 12);
// Load Interrupt 5 Routine from disk to memory
load (19, 13);
load (20, 14);
// Load Interrupt 6 Routine from disk to memory
load (21, 15);
load (22, 16);
// Load Interrupt 7 Routine from disk to memory
load(23, 17);
load(24, 18);
[READY_LIST + 0] = 0; // Sets the entry for PID as 0
load(25,21); // Load 1st page of code from disk to memory
load(26,22); // Load 2nd page of code from disk to memory
load(27,23); // Load 3rd page of code from disk to memory

//////////setting entries of System-Wide Open File Table to invalid//////////////
alias counter S0;			
counter = 0;
while ( counter <  128) do			// 64 entries, each of size 2 words
	[ FILE_TABLE + counter + 0] = -1;	// Set FAT Index to -1
	[ FILE_TABLE + counter + 1] =  0;	// Set File Open Count to 0
	counter = counter + 2;			// Move to next entry
endwhile;

/////SETTING UP PAGE TABLE/////////////////////////////
PTBR = 1024;
PTLR = 4;
[PTBR + 0] = 25; // Physical Page Number for Logical Page 0
[PTBR + 1] = "01"; // Auxiliary Information for Logical Page 0
[PTBR + 2] = 26; // Physical Page Number for Logical Page 1
[PTBR + 3] = "01"; // Auxiliary Information for Logical Page 1
[PTBR + 4] = 27; // Physical Page Number for Logical Page 2
[PTBR + 5] = "01"; // Auxiliary Information for Logical Page 3
[PTBR + 6] = 28; // Physical Page Number for Logical Page 3 (Stack)
[PTBR + 7] = "01"; // Auxiliary Information for Logical Page 3 (Stack)
//////////// SETTING UP Per-Process Open-File Tables for INIT process////
counter = 15;
while (counter <= 30) do
      [READY_LIST + counter] = -1;//set invalid pointer to system wide open file table Entry
      [READY_LIST + counter + 1] = -1;//set invalid LSEEK position
      counter = counter + 2;
endwhile;
///////////////////////SETTING UP MEMORY FREE LIST/////////////
counter = 0;
while (counter < 64) do
      if (counter <= 28) then
      	 [MEM_LIST + counter] = 1;
      else
	 [MEM_LIST + counter] = 0;	
      endif;
      counter = counter + 1;
endwhile;
////////////SETTING UP PCB STATUS FOR ALL PROCESS//////////////////
counter = 0;
while (counter < 1024) do
      [READY_LIST + counter + 1] = 0;
      counter = counter + 32;
endwhile;
//////////////SET COUNT TO ZERO FOR INIT///////////
[1472] = 0;
[READY_LIST + 1] = 2; // Sets the entry for STATE as Running
[READY_LIST + 31] = 0; // Set Parent PID as 0 for init
SP = 3 * 512;
[28 * 512] = 0; // Set up the IP value for INIT in the stack
ireturn; 