alias physicalSP S0;
alias System_call_NO S1;
alias Argument1 S2;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
System_call_NO = [physicalSP - 1];
Argument1 = [physicalSP - 3];
print(Argument1);
///////////////////////////////////////////////////////////////////////////
///////////////// EXCV SYS CALL////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
if (System_call_NO == 9) then
   ////////FAT is searched for filename //////////////////////
   alias FileIndex S3;
   FileIndex = 0;
   while(FileIndex < 64) do
   	if(Argument1 == [FAT + FileIndex*8]) then
	    break;
	endif;
	FileIndex = FileIndex + 1;
   endwhile;
   print("DDDD");
   breakpoint;
   if (FileIndex >= 64) then
      [physicalSP - 2] = -1;
      ireturn;
   endif;
   //////////////////////////LOAD BASIC BLOCK TO SCRACHPAD///////////////////
   load(1, [FAT + FileIndex*8 + 2]);
   ///////////////////SETTING DISK BLOCK NUMBER FOR NEW PROGRAM////////////////
   if ([SCRATCHPAD + 3]!= -1) then
      print("Big Program");
   endif;
   alias page_Num S4;
   alias counter S5;
   counter = 0;
   page_Num = 0;
   while(counter < 3) do
      page_Num = [PTBR + counter*2];
      if ([PTBR + 2*counter + 1]%10 == 1) then
	  [MEM_LIST + page_Num] = [MEM_LIST + page_Num] - 1;
      else
	if (page_Num >= 448) then
	   [DISK_LIST + page_Num] = [DISK_LIST + page_Num] - 1;
	endif;
      endif;
      if ([SCRATCHPAD + counter] != -1) then
      	 [PTBR + counter*2] = [SCRATCHPAD + counter];
      else
         [PTBR + counter*2] = -1;
      endif;
      [PTBR + counter*2 + 1] = "00";
      counter = counter + 1;
   endwhile;
   //store back disk free list to disk
   store(6,20);
   [PTBR + 2*3 + 1] = "01" ;// Page table entry for stack initalized
   ///////////////CLOSE ALL FILES OPENED BY CURRENT PROCESS///////////
   alias currentPID S7;
   currentPID = (PTBR - 1024) / 8;
   alias currentPCB S6;
   currentPCB = READY_LIST + 32 * currentPID;
   ///// FINDING INDEX TO SYSTEM WIDE OPEN FILE ENTRY///////////
   counter = 0;
   while(counter < 8) do
      if ([currentPCB + 15 + 2*counter]== -1) then
         counter = counter + 1;
         continue;
      else
         FileIndex = [currentPCB + 15 + 2*counter];
      endif;
      ////////REDUCE NUMBER OF OPEN FILES BY 1/////////////////
      [ FILE_TABLE + FileIndex + 1] = [ FILE_TABLE + FileIndex + 1] - 1;
      ///////////////INVALIDATE FAT INDEX IN SYS WIDE OPEN FILE TABLE IN CASE OF OPEN FILES ARE ZERO
      if ([ FILE_TABLE + FileIndex + 1] == 0) then
      	 [ FILE_TABLE + FileIndex] = -1;
      endif;
      /////INVALIDATING PER PROCESS FILE TABLE
      [currentPCB + 15 + 2*counter] = -1;
      [currentPCB + 15 + 2*counter + 1] = -1;
      counter = counter + 1;
   endwhile;
   ////////////SETTING UP STACK POINTER////////////////////
   SP = 3*512;
   physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
   [physicalSP] = 0;//SETTING IP FOR NEW PROCESS
   ireturn;
endif;
///////////////Getpid SYS call///////////////
if (System_call_NO == 11) then
   alias currentPID S5;
   currentPID = (PTBR - 1024) / 8;
   [physicalSP - 2] = currentPID;
   ireturn;   
endif;
///////////////Getppid SYS call///////////////
if (System_call_NO == 12) then
   alias currentPID S5;
   currentPID = (PTBR - 1024) / 8;
   alias currentPCB S6;
   currentPCB = READY_LIST + 32 * currentPID;
   [physicalSP - 2] = [currentPCB + 31];
   ireturn;
   
endif;